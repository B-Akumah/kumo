package edu.csis.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import edu.csis.model.FundsTransaction;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.List;
import java.util.Locale;
import java.util.Vector;

/**
 * @author bakumah
 */
public class TransactionHistoryPage extends JFrame {
    private JPanel transactionHistoryPanel;
    private JTable transactionsTable;
    private JButton homeButton;
    private JLabel accountGlance;

    public TransactionHistoryPage(int transactionID, List<FundsTransaction> transactionList) {
        System.out.println(transactionList.size());
        initComponents();

        Vector<String> propertyNamesVector = new Vector<>(List.of("Transaction ID", "Date", "Detail", "Amount"));

        Vector<Vector<String>> transactionVector = new Vector<>();
        for (FundsTransaction fundsTransaction : transactionList) {
            Vector<String> transactionRow = new Vector<>();
            transactionRow.add(fundsTransaction.getTransactionId().toString());
            transactionRow.add(fundsTransaction.getTransactionTimestamp().toString());
            String amount = String.valueOf(fundsTransaction.getAmount());
            String detail = "Transfer from " + fundsTransaction.getFromAccount().getAccountNumber();
            if (fundsTransaction.getFromAccount().getAccountNumber() == transactionID) {
                amount = "-" + amount;
                detail = "Transfer to " + fundsTransaction.getToAccount().getAccountNumber();
            }
            transactionRow.add(detail);
            transactionRow.add(amount);
            transactionVector.add(transactionRow);
        }
        // Create a non-editable DefaultTableModel and set it as the model for the titlesTable
        DefaultTableModel defaultTableModel = new DefaultTableModel(transactionVector, propertyNamesVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        transactionsTable.setModel(defaultTableModel);

    }

    private void initComponents() {
        // Set the mainPanel as the content pane of the JFrame
        setContentPane(transactionHistoryPanel);

        // Set the title, default close operation, visibility, and pack the JFrame
        setTitle("KUMO Banking");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setVisible(true);
        pack();
    }

    public JPanel getTransactionHistoryPanel() {
        return transactionHistoryPanel;
    }

    public JTable getTransactionsTable() {
        return transactionsTable;
    }

    public JButton getHomeButton() {
        return homeButton;
    }

    public JLabel getAccountGlance() {
        return accountGlance;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        transactionHistoryPanel = new JPanel();
        transactionHistoryPanel.setLayout(new GridLayoutManager(4, 3, new Insets(20, 20, 20, 20), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Arial Narrow", Font.BOLD, 22, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Transaction History");
        transactionHistoryPanel.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        accountGlance = new JLabel();
        accountGlance.setText("account #: $0.00");
        transactionHistoryPanel.add(accountGlance, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        transactionHistoryPanel.add(scrollPane1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(800, 600), new Dimension(800, 600), null, 0, false));
        transactionsTable = new JTable();
        scrollPane1.setViewportView(transactionsTable);
        homeButton = new JButton();
        homeButton.setText("Home");
        transactionHistoryPanel.add(homeButton, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 50), null, 0, false));
        final JSeparator separator1 = new JSeparator();
        transactionHistoryPanel.add(separator1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        transactionHistoryPanel.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {resultName = currentFont.getName();} else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {resultName = fontName;} else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {return transactionHistoryPanel;}

}
