package edu.csis.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import edu.csis.model.AccountType;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

/**
 * This class represents the GUI page for adding a new bank account in the KUMO Banking application.
 * It extends JFrame and contains a panel with components for selecting the account type and providing the starting balance.
 *
 * @author bakumah
 */
public class AddAccountPage extends JFrame {
    // Account type selected by the user
    String accountType;

    // GUI components
    private JPanel addAccountPanel;
    private JComboBox<String> accountTypeDropdown;
    private JTextField startingBalanceInput;
    private JButton homeButton;
    private JButton accountManagerButton;
    private JButton createButton;

    /**
     * Constructor for the AddAccountPage class.
     * Initializes the GUI components, populates the account type dropdown, and primes the account type.
     */
    public AddAccountPage() {
        // Populate the account type dropdown with values from the AccountType enum
        for (AccountType type : AccountType.values()) {
            accountTypeDropdown.addItem(type.toString());
        }

        // Prime the account type with the selected item in the dropdown
        primeAccountType();

        // Initialize the rest of the GUI components
        initComponents();

        // Add an action listener to the accountTypeDropdown to update the selected account type
        accountTypeDropdown.addActionListener(e -> {
            primeAccountType();
        });
    }

    /**
     * Returns the selected account type.
     *
     * @return The selected account type as a String.
     */
    public String getAccountType() {
        return accountType;
    }

    /**
     * Returns the Starting Balance Input field where the user enters the initial balance for the new account.
     *
     * @return The Starting Balance Input field instance.
     */
    public JTextField getStartingBalanceInput() {
        return startingBalanceInput;
    }

    /**
     * Returns the Home Button on the add account page.
     *
     * @return The Home Button instance.
     */
    public JButton getHomeButton() {
        return homeButton;
    }

    /**
     * Returns the Account Manager Button on the add account page.
     *
     * @return The Account Manager Button instance.
     */
    public JButton getAccountManagerButton() {
        return accountManagerButton;
    }

    /**
     * Returns the Create Button on the add account page.
     *
     * @return The Create Button instance.
     */
    public JButton getCreateButton() {
        return createButton;
    }

    /**
     * Primes the accountType variable with the selected item from the accountTypeDropdown.
     * This method is called when the user selects an item in the dropdown.
     */
    void primeAccountType() {
        accountType = accountTypeDropdown.getSelectedItem().toString();
    }

    /**
     * Initializes the components of the GUI.
     * Sets up the content pane, title, default close operation, visibility, and packs the JFrame.
     */
    private void initComponents() {
        // Set the addAccountPanel as the content pane of the JFrame
        setContentPane(addAccountPanel);

        // Set the title, default close operation, visibility, and pack the JFrame
        setTitle("KUMO Banking");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setVisible(true);
        pack();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        addAccountPanel = new JPanel();
        addAccountPanel.setLayout(new GridLayoutManager(8, 4, new Insets(20, 50, 30, 50), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Arial Narrow", Font.BOLD, 22, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Add A New Bank Account");
        addAccountPanel.add(label1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Account Type");
        addAccountPanel.add(label2, new GridConstraints(2, 0, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        accountTypeDropdown = new JComboBox();
        accountTypeDropdown.setBackground(new Color(-657931));
        addAccountPanel.add(accountTypeDropdown, new GridConstraints(3, 0, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(250, 35), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Starting Balance");
        addAccountPanel.add(label3, new GridConstraints(4, 0, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startingBalanceInput = new JTextField();
        addAccountPanel.add(startingBalanceInput, new GridConstraints(5, 0, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(250, 35), null, 0, false));
        homeButton = new JButton();
        homeButton.setText("Home");
        addAccountPanel.add(homeButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 50), null, 0, false));
        accountManagerButton = new JButton();
        accountManagerButton.setText("Account Manager");
        addAccountPanel.add(accountManagerButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 50), null, 0, false));
        final Spacer spacer1 = new Spacer();
        addAccountPanel.add(spacer1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        createButton = new JButton();
        createButton.setText("Create");
        addAccountPanel.add(createButton, new GridConstraints(7, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        addAccountPanel.add(spacer2, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        addAccountPanel.add(spacer3, new GridConstraints(6, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {resultName = currentFont.getName();} else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {resultName = fontName;} else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {return addAccountPanel;}

}
